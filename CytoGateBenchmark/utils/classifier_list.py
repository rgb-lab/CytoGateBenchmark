from sklearn.ensemble import (RandomForestClassifier,
                              ExtraTreesClassifier,
                              GradientBoostingClassifier,
                              HistGradientBoostingClassifier)
from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import (RidgeClassifier,
                                  RidgeClassifierCV,
                                  Perceptron,
                                  SGDClassifier,
                                  PassiveAggressiveClassifier)
from sklearn.neighbors import KNeighborsClassifier, NearestCentroid
from sklearn.naive_bayes import GaussianNB, MultinomialNB, ComplementNB, BernoulliNB, CategoricalNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.semi_supervised import LabelPropagation, LabelSpreading
from typing import Optional, Any
from sklearn.svm import NuSVC, LinearSVC, SVC
import numpy as np


def characterization(classifier,
                     scalable: Optional[bool] = None,
                     accepts_empty_class: Optional[bool] = None,
                     allows_multi_class: bool = True,
                     multiprocessing: bool = False,
                     grid: dict = {}) -> dict[str: Any]:
    return {
        "classifier": classifier,
        "scalable": scalable,
        "accepts_empty_class": accepts_empty_class,
        "allows_multi_class": allows_multi_class,
        "multiprocessing": multiprocessing,
        "grid": grid
    }


GRIDS = {
    "RandomForestClassifier": dict(
        max_features=['sqrt', 'log2', None],
        criterion=["gini", "entropy", "log_loss"],
        bootstrap=[True, False],
        warm_start=[True, False],
        class_weight=["balanced", "balanced_subsample", None],
        min_samples_leaf = [1, 2, 4, 8, 16, 32, 64],
        min_samples_split=[2, 4, 6, 8, 10, 15, 20, 30, 40, 50, 100],
        n_estimators=[5, 10, 50, 100, 200, 500],
        max_depth=[10, 50, 100, 200, 500, None],
    ),
    "DecisionTreeClassifier": dict(
        criterion=["gini", "entropy", "log_loss"],
        splitter=["best", "random"],
        max_features=["sqrt", "log2", None],
        class_weight=["balanced", None],
        min_samples_leaf = [1, 2, 4, 8, 16, 32, 64],
        min_samples_split=[2, 4, 6, 8, 10, 15, 20, 30, 40, 50, 100],
        max_depth=[10, 50, 100, 200, 500, None],
    ),
    "ExtraTreesClassifier": dict(
        criterion=["gini", "entropy", "log_loss"],
        min_samples_leaf = [1, 2, 4, 8, 16, 32, 64],
        min_samples_split=[2, 4, 6, 8, 10, 15, 20, 30, 40, 50, 100],
        max_features=["sqrt", "log2", None],
        class_weight=["balanced", "balanced_subsample", None],
        warm_start=[True, False],
        bootstrap=[True, False],
        n_estimators=[5, 10, 50, 100, 200, 500],
        max_depth=[10, 50, 100, 200, 500, None],
    ),
    "ExtraTreeClassifier": dict(
        criterion=["gini", "entropy", "log_loss"],
        splitter=["random", "best"],
        min_samples_split=[2, 4, 6, 8, 10, 15, 20, 30, 40, 50, 100],
        min_samples_leaf = [1, 2, 4, 8, 16, 32, 64],
        max_features=["sqrt", "log2", None],
        class_weight=["balanced", None],
        max_depth=[10, 50, 100, 200, 500, None],
    ),
    "MLPClassifier": dict(
        hidden_layer_sizes = [
            (10,),
            (10,10,),
            (10,10,10,),
            (10,10,10,10),
            (50,),
            (50,50,),
            (50,50,50),
            (50,50,50,50),
            (100,),
            (100,100,),
            (100,100,100),
            (100,100,100,100),
            (200,),
            (200,200,),
            (200,200,200,),
            (200,200,200,200),
            (500,),
            (500,500,),
            (500,500,500,),
            (500,500,500,500),
        ],
        learning_rate = ["constant", "invscaling", "adaptive"],
        learning_rate_init = [0.01, 0.001, 0.0001],
        power_t = [0.1, 0.3, 0.5, 1, 2, 5],
        activation = ["identity", "logistic", "tanh", "relu"],
        solver = ["lbfgs", "sgd", "adam"],
        batch_size = [50, 100, 200, 500, 1000, 5000],
        early_stopping = [True],
        tol = [1e-3],
        max_iter = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 14_000]
    ),
    "RidgeClassifier": dict(
        alpha=[
            1 / x
            for x in [
                1e-1,
                1,
                10,
                100,
                1000,
                10_000,
                100_000,
                200_000,
                500_000,
                1_000_000,
            ]
        ],
        fit_intercept=[True, False],
        tol=[1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        class_weight=["balanced", None],  ## excluded
        solver=["auto", "svd", "cholesky", "lsqr", "sparse_cg", "sag", "saga"],
        max_iter=[
            None,
            1,
            5,
            10,
            15,
            20,
            25,
            30,
            50,
            100,
            200,
            500,
            1000,
            2000,
            5000,
            10_000,
            20_000,
            50_000,
            100_000,
        ],
    ),
    "RidgeClassifierCV": dict(
        fit_intercept=[True, False],
        alphas=[
            tuple(1 / x for x in [1e-1, 1]),
            tuple(1 / x for x in [1, 10]),
            tuple(1 / x for x in [10, 100]),
            tuple(1 / x for x in [100, 1000]),
            tuple(1 / x for x in [1000, 10_000]),
        ],
        class_weight=["balanced", None],
        cv=[2, 3, 4, 5, 6],
    ),
    "KNN": dict(
        n_neighbors=list(range(2, 64, 2)),
        weights=["uniform", "distance"],
        p = [1,2,3],
        algorithm=["auto", "ball_tree", "kd_tree", "brute"],
        leaf_size=list(range(2, 64, 3)),
    ),
    "LabelSpreading": dict(
        estimator__kernel=["knn", "rbf"],
        estimator__gamma=[1000, 100, 10, 1, 0.1, 0.01, 0.001],
        estimator__n_neighbors=np.arange(1, 50, 2),
        estimator__max_iter=[10, 100, 1000, 10_000, 100_000],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__alpha=np.arange(0, 1, 0.1),
    ),
    "LabelPropagation": dict(
        estimator__kernel=["knn", "rbf"],
        estimator__gamma=[10_000, 1000, 100, 10, 1, 0.1, 0.01, 0.001],
        estimator__neighbors=np.arange(1, 50, 2),
        estimator__max_iter=[10, 100, 1000, 10_000, 100_000],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
    ),
    "QuadraticDiscriminantAnalysis": dict(
        estimator__reg_param=[
            1 / x
            for x in [
                10,
                100,
                1000,
                10_000,
                100_000,
                1_000_000,
                10_000_000,
                100_000_000,
            ]
        ],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
    ),
    "LinearDiscriminantAnalysis": dict(
        estimator__solver=["svd", "lsqr", "eigen"],
        estimator__shrinkage=[None, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, "auto"],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
    ),
    "NearestCentroid": dict(
        estimator__shrink_threshold=[1 / x for x in [1e-2, 1e-1, 1, 10, 100]]
    ),
    "PassiveAggressiveClassifier": dict(
        estimator__C=[
            1 / x
            for x in [1e-3, 1e-2, 1e-1, 1, 10, 100, 1000, 10_000, 100_000]
        ],
        estimator__fit_intercept=[True, False],
        estimator__max_iter=[10, 100, 1000, 5_000, 10_000, 50_000, 100_000],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__early_stopping=[True, False],
        estimator__loss=["hinge", "squared_hinge"],
        estimator__class_weight=["balanced", None],
    ),
    "SGDClassifier": dict(
        estimator__loss=[
            "hinge",
            "log_loss",
            "log",
            "modified_huber",
            "squared_hinge",
            "perceptron",
            "squared_error",
            "huber",
            "epsilon_insensitive",
            "squared_epsilon_insensitive",
        ],
        estimator__penalty=["l1", "l2", "elasticnet"],
        estimator__alpha=[1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000]],
        estimator__l1_ratio=np.arange(0.05, 1, 0.05),
        estimator__fit_intercept=[True, False],
        estimator__max_iter=[10, 100, 1000, 10_000, 30_000, 50_000],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__learning_rate=["constant", "optimal", "invscaling", "adaptive"],
        estimator__class_weight=["balanced", None],
    ),
    "HistGradientBoostingClassifier": dict(
        estimator__loss=[
            "log_loss",
            "auto",
            "binary_crossentropy",
            "categorical_crossentropy",
        ],
        estimator__learning_rate=[
            1 / x for x in [1e-2, 1e-1, 1, 10, 100, 1000, 10_000, 100_000]
        ],
        estimator__max_iter=[100, 1000, 5000, 10_000, 30_000, 50_000, 100_000],
        estimator__max_depth=np.arange(1, 100, 5),
        estimator__early_stopping=["auto", True, False],
        estimator__tol=[1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
    ),
    "GradientBoostingClassifier": dict(
        estimator__loss=["log_loss", "deviance", "exponential"],
        estimator__learning_rate=[
            1 / x for x in [1e-2, 1e-1, 1, 10, 100, 1000, 10_000, 100_000]
        ],
        estimator__n_estimators=[10, 50, 100, 500, 1000, 5000, 10_000],
        estimator__subsample=[0.2, 0.4, 0.6, 0.8, 1],
        estimator__criterion=["friedman_mse, squared_error", "mse"],
        estimator__min_samples_split=[2, 4, 6, 8, 10],
        estimator__max_depth=np.arange(1, 100, 5),
        estimator__max_features=["auto", "sqrt", "log2"],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
    ),
    "CategoricalNB": dict(
        estimator__alpha=[1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000]],
        estimator__fit_prior=[True, False],
    ),
    "GaussianNB": dict(estimator__var_smoothing = np.logspace(0, -12, num=500)),
    "BernoulliNB": dict(
        estimator__alpha=[1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000]],
        estimator__fit_prior=[True, False],
        estimator__binarize=[1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000]],
    ),
    "ComplementNB": dict(
        estimator__alpha=[
            1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000, 1_000_000]
        ],
        estimator__fit_prior=[True, False],
        estimator__norm=[True, False],
    ),
    "MultinomialNB": dict(
        estimator__alpha=[1 / x for x in [1e-1, 1, 10, 100, 1000, 10_000, 100_000]],
        estimator__fit_prior=[True, False],
    ),
    "NuSVC": dict(
        estimator__nu=[1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10],
        estimator__kernel=["linear", "poly", "rbf"],
        estimator__degree=np.arange(1, 10, 1),
        estimator__gamma=["scale", "auto", 1000, 100, 10, 1, 0.1, 0.01, 0.001],
        estimator__shrinking=[True, False],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__class_weight=["balanced", None],
        estimator__max_iter=[10_000, 30_000, 50_000, 100_000],
    ),
    "LinearSVC": dict(
        estimator__penalty=["l1", "l2"],
        estimator__loss=["hinge", "squared_hinge"],
        estimator__dual=[True, False],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__C=np.arange(50, 1000, 50),
        estimator__fit_intercept=[True, False],
        estimator__class_weight=["balanced", None],
        estimator__max_iter=[10_000, 30_000, 50_000, 100_000],
    ),
    "SVC": dict(
        estimator__C=np.arange(50, 1000, 50),
        estimator__kernel=["linear", "poly", "rbf"],
        estimator__gamma=["scale", "auto", 1000, 100, 10, 1, 0.1, 0.01, 0.001],
        estimator__shrinking=[True, False],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__break_ties=[True, False],
    ),
    "Perceptron": dict(
        estimator__penalty=[None, "l2", "l1", "elasticnet"],
        estimator__alpha=[
            1 / x
            for x in [
                1e-1,
                1,
                10,
                100,
                1000,
                10_000,
                100_000,
                200_000,
                500_000,
                1_000_000,
                10_000_000,
                100_000_000,
            ]
        ],
        estimator__l1_ratio=np.arange(0.05, 1, 0.05),
        estimator__fit_intercept=[True, False],
        estimator__tol=[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1],
        estimator__shuffle=[True, False],
        estimator__early_stopping=[True, False],
    ),
}

CLASSIFIERS_TO_TEST = {
    "RandomForestClassifier": characterization(classifier = RandomForestClassifier,
                                               scalable = None,
                                               accepts_empty_class = True,
                                               allows_multi_class = True,
                                               multiprocessing = True,
                                               grid = GRIDS["RandomForestClassifier"]),
    "DecisionTreeClassifier": characterization(classifier = DecisionTreeClassifier,
                                               scalable = None,
                                               accepts_empty_class = True,
                                               allows_multi_class = True,
                                               multiprocessing = False,
                                               grid = GRIDS["DecisionTreeClassifier"]),
    "ExtraTreesClassifier": characterization(classifier = ExtraTreesClassifier,
                                             scalable = None,
                                             accepts_empty_class = True,
                                             allows_multi_class = True,
                                             multiprocessing = True,
                                             grid = GRIDS["ExtraTreesClassifier"]),
    "ExtraTreeClassifier": characterization(classifier = ExtraTreeClassifier,
                                            scalable = None,
                                            accepts_empty_class = True,
                                            allows_multi_class = True,
                                            multiprocessing = False,
                                            grid = GRIDS["ExtraTreeClassifier"]),
    "MLPClassifier": characterization(classifier = MLPClassifier,
                                      scalable = None,
                                      accepts_empty_class = True,
                                      allows_multi_class = True,
                                      multiprocessing = False,
                                      grid = GRIDS["MLPClassifier"]),
    "KNN": characterization(classifier = KNeighborsClassifier,
                            scalable = None,
                            accepts_empty_class = True,
                            allows_multi_class = True,
                            multiprocessing = True,
                            grid = GRIDS["KNN"])
}


CLASSIFIERS_TO_TEST_FULL = { 
    "RandomForestClassifier": characterization(classifier = RandomForestClassifier,
                                               scalable = None,
                                               accepts_empty_class = True,
                                               allows_multi_class = True,
                                               multiprocessing = True,
                                               grid = GRIDS["RandomForestClassifier"]),
    "DecisionTreeClassifier": characterization(classifier = DecisionTreeClassifier,
                                               scalable = None,
                                               accepts_empty_class = True,
                                               allows_multi_class = True,
                                               multiprocessing = False,
                                               grid = GRIDS["DecisionTreeClassifier"]),
    "ExtraTreesClassifier": characterization(classifier = ExtraTreesClassifier,
                                             scalable = None,
                                             accepts_empty_class = True,
                                             allows_multi_class = True,
                                             multiprocessing = True,
                                             grid = GRIDS["ExtraTreesClassifier"]),
    "ExtraTreeClassifier": characterization(classifier = ExtraTreeClassifier,
                                            scalable = None,
                                            accepts_empty_class = True,
                                            allows_multi_class = True,
                                            multiprocessing = False,
                                            grid = GRIDS["ExtraTreeClassifier"]),
    "MLPClassifier": characterization(classifier = MLPClassifier,
                                      scalable = None,
                                      accepts_empty_class = True,
                                      allows_multi_class = True,
                                      multiprocessing = False,
                                      grid = GRIDS["MLPClassifier"]),
    "RidgeClassifier": characterization(classifier = RidgeClassifier,
                                        scalable = None,
                                        accepts_empty_class = True,
                                        allows_multi_class = True,
                                        multiprocessing = False,
                                        grid = GRIDS["RidgeClassifier"]),
    "RidgeClassifierCV": characterization(classifier = RidgeClassifierCV,
                                          scalable = None,
                                          accepts_empty_class = True, 
                                          allows_multi_class = True,
                                          multiprocessing = False,
                                          grid = GRIDS["RidgeClassifierCV"]),
    "KNN": characterization(classifier = KNeighborsClassifier,
                            scalable = None,
                            accepts_empty_class = True,
                            allows_multi_class = True,
                            multiprocessing = True,
                            grid = GRIDS["KNN"]),
    "LabelSpreading": characterization(classifier = LabelSpreading,
                                       scalable = False,
                                       accepts_empty_class = True,
                                       allows_multi_class = False,
                                       multiprocessing = False,
                                       grid = GRIDS["LabelSpreading"]),
    "LabelPropagation": characterization(classifier = LabelPropagation,
                                         scalable = False,
                                         accepts_empty_class = True,
                                         allows_multi_class = False,
                                         multiprocessing = False,
                                         grid = GRIDS["LabelPropagation"]),
    "QuadraticDiscriminantAnalysis": characterization(classifier = QuadraticDiscriminantAnalysis,
                                                      scalable = None,
                                                      accepts_empty_class = False,
                                                      allows_multi_class = False,
                                                      multiprocessing = True,
                                                      grid = GRIDS["QuadraticDiscriminantAnalysis"]),
    "LinearDiscriminantAnalysis": characterization(classifier = LinearDiscriminantAnalysis,
                                                   scalable = None,
                                                   accepts_empty_class = True,
                                                   allows_multi_class = False,
                                                   multiprocessing = True,
                                                   grid = GRIDS["LinearDiscriminantAnalysis"]),
    "NearestCentroid": characterization(classifier = NearestCentroid,
                                        scalable = None,
                                        accepts_empty_class = False,
                                        allows_multi_class = False,
                                        multiprocessing = True,
                                        grid = GRIDS["NearestCentroid"]),
    "PassiveAggressiveClassifier": characterization(classifier = PassiveAggressiveClassifier,
                                                    scalable = None,
                                                    accepts_empty_class = False,
                                                    allows_multi_class = False,
                                                    multiprocessing = True,
                                                    grid = GRIDS["PassiveAggressiveClassifier"]),
    "SGDClassifier": characterization(classifier = SGDClassifier,
                                      scalable = None,
                                      accepts_empty_class = False,
                                      allows_multi_class = False,
                                      multiprocessing = True,
                                      grid = GRIDS["SGDClassifier"]),
    "HistGradientBoostingClassifier": characterization(classifier = HistGradientBoostingClassifier,
                                                       scalable = None,
                                                       accepts_empty_class = False,
                                                       allows_multi_class = False,
                                                       multiprocessing = True,
                                                       grid = GRIDS["HistGradientBoostingClassifier"]),
    "GradientBoostingClassifier": characterization(classifier = GradientBoostingClassifier,
                                                   scalable = None,
                                                   accepts_empty_class = False,
                                                   allows_multi_class = False,
                                                   multiprocessing = True,
                                                   grid = GRIDS["GradientBoostingClassifier"]),
    "CategoricalNB": characterization(classifier = CategoricalNB,
                                      scalable = None,
                                      accepts_empty_class = False,
                                      allows_multi_class = False,
                                      multiprocessing = True,
                                      grid = GRIDS["CategoricalNB"]), 
    "GaussianNB": characterization(classifier = GaussianNB,
                                   scalable = None,
                                   accepts_empty_class = True,
                                   allows_multi_class = False,
                                   multiprocessing = True,
                                   grid = GRIDS["GaussianNB"]),
    "BernoulliNB": characterization(classifier = BernoulliNB,
                                    scalable = None,
                                    accepts_empty_class = True,
                                    allows_multi_class = False,
                                    multiprocessing = True,
                                    grid = GRIDS["BernoulliNB"]),
    "ComplementNB": characterization(classifier = ComplementNB,
                                     scalable = None,
                                     accepts_empty_class = True,
                                     allows_multi_class = False,
                                     multiprocessing = True,
                                     grid = GRIDS["ComplementNB"]),
    "MultinomialNB": characterization(classifier = MultinomialNB,
                                      scalable = None,
                                      accepts_empty_class = True,
                                      allows_multi_class = False,
                                      multiprocessing = True,
                                      grid = GRIDS["MultinomialNB"]),
    "NuSVC": characterization(classifier = NuSVC,
                              scalable = None,
                              accepts_empty_class = False,
                              allows_multi_class = False,
                              multiprocessing = True,
                              grid = GRIDS["NuSVC"]), 
    "LinearSVC": characterization(classifier = LinearSVC,
                                  scalable = None,
                                  accepts_empty_class = False,
                                  allows_multi_class = False,
                                  multiprocessing = True,
                                  grid = GRIDS["LinearSVC"]),
    "SVC": characterization(classifier = SVC,
                            scalable = None,
                            accepts_empty_class = False, 
                            allows_multi_class = False,
                            multiprocessing = True,
                            grid = GRIDS["SVC"]), 
    "Perceptron": characterization(classifier = Perceptron, 
                                   scalable = None, 
                                   accepts_empty_class = False,
                                   allows_multi_class = False,
                                   multiprocessing = True,
                                   grid = GRIDS["Perceptron"])
}

